#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Computational Physics - Exercise 1"
\pdf_author "Joel Schumacher"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Computational Physics - Exercise 1
\end_layout

\begin_layout Author
Joel Schumacher, 309231, joel.schumacher@rwth-aachen.de
\end_layout

\begin_layout Section*
Task 1
\end_layout

\begin_layout Subsection*
1.
\end_layout

\begin_layout Standard
With my matricle number being 
\begin_inset Formula $309231$
\end_inset

, I chose the seed of the Mersenne Twister random number generator used
 by the numpy module as 
\begin_inset Formula $9231$
\end_inset

.
 The convenience function 
\begin_inset Formula $np.random.rand$
\end_inset

 will return uniform random samples in the interval 
\begin_inset Formula $[0,1)$
\end_inset

, so that I have to rescale into 
\begin_inset Formula $[-5.0,5.0)$
\end_inset

.
\end_layout

\begin_layout Standard
The resulting matrix 
\begin_inset Formula $A$
\end_inset

 is then:
\begin_inset Formula 
\[
A=\begin{pmatrix}2.2029 & 4.9743 & -2.0779 & 3.1163 & 1.2233 & -2.0957\\
-4.1435 & 1.4772 & 0.3867 & 2.7847 & -0.1969 & -3.7180\\
4.5648 & -4.4702 & -0.8552 & 3.4828 & 0.4080 & -3.1573\\
0.1776 & -4.0575 & -1.2090 & 2.4640 & 4.7895 & -3.2285\\
4.8563 & 2.5141 & 1.2010 & -1.8702 & 1.9321 & 2.6607\\
-2.6221 & 1.5498 & -0.3413 & 4.3567 & -1.2784 & 2.6796
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Subsection*
2.
\end_layout

\begin_layout Standard
The largest element of the matrix was then found at the index 
\begin_inset Formula $0,1$
\end_inset

.
 In regular mathematical notation this corresponds to the element 
\begin_inset Formula $A_{12}$
\end_inset

, which is equal to 
\begin_inset Formula $A_{12}=4.9743$
\end_inset

.
\end_layout

\begin_layout Subsection*
3.
\end_layout

\begin_layout Standard
The vectors containing the largest value for each column 
\begin_inset Formula $r$
\end_inset

, a row-vector and 
\begin_inset Formula $c$
\end_inset

 a column-vector containing the largest value for each row will be determined
 using the extra argument of numpy's 
\begin_inset Formula $max$
\end_inset

 function.
 The results are:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
r=\begin{pmatrix}4.8563 & 4.9743 & 1.2010 & 4.3567 & 4.7895 & 2.6796\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c=\begin{pmatrix}4.9743\\
2.7847\\
4.5648\\
4.7895\\
4.8563\\
4.3567
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
The product of these vectors, assuming we are not supposed to calculate
 
\begin_inset Formula $c\cdot r$
\end_inset

 is then 
\begin_inset Formula 
\[
r\cdot c\approx99.29
\]

\end_inset


\end_layout

\begin_layout Standard
Which is above what would have been expected, since the expected value of
 the maximum of 
\begin_inset Formula $N$
\end_inset

 samples of a uniform distribution between 
\begin_inset Formula $[0,1]$
\end_inset

 is 
\begin_inset Formula $\frac{N}{N+1}.$
\end_inset

 For a proof, see the appendix 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:exp_max"

\end_inset

.
 The rescaled expected value for the maximum of 
\begin_inset Formula $6$
\end_inset

 independent samples is then 
\begin_inset Formula $m=\frac{6}{7}*10-5\approx3.57$
\end_inset

.
 We would then expect a scalar product of 
\begin_inset Formula $<r\cdot c>=6m^{2}\approx76.53$
\end_inset

.
\end_layout

\begin_layout Subsection*
4.
\end_layout

\begin_layout Standard
Our second random matrix is:
\begin_inset Formula 
\[
B=\begin{pmatrix}4.8686 & -3.3602 & -1.8808 & 4.2009 & -1.6982 & -3.8247\\
2.5127 & -4.7676 & -2.5390 & -2.4462 & -0.7683 & 3.8182\\
-0.5627 & 1.4668 & 1.6576 & -1.4767 & -2.8466 & -4.3560\\
4.2442 & 1.5349 & -2.6651 & -4.3131 & -4.8585 & -2.9110\\
-1.6806 & 3.0978 & -1.4647 & -3.4098 & -2.9560 & 1.5230\\
-3.3280 & -2.2861 & 3.8720 & 0.8065 & 1.3259 & -2.3052
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
Using the function 
\begin_inset Formula $np.dot$
\end_inset

 we can calculate the matrix products 
\begin_inset Formula $C=A\cdot B$
\end_inset

 and 
\begin_inset Formula $D=B\cdot A$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C=A\cdot B=\begin{pmatrix}42.5379 & -20.8025 & -38.4292 & -19.1478 & -23.1825 & 17.2414\\
7.8440 & 19.6115 & -16.8457 & -35.9287 & -13.0759 & 19.9684\\
36.0774 & 18.5460 & -20.7583 & 12.4152 & -24.1965 & -33.0410\\
4.5027 & 42.9743 & -18.1186 & -17.1054 & -24.1526 & -3.3417\\
9.2449 & -29.5105 & -1.0696 & 16.1004 & -6.6947 & -11.9526\\
3.0418 & -2.4778 & 1.0678 & -26.5728 & -9.6015 & -3.3734
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
D=B\cdot A=\begin{pmatrix}18.5909 & 0.4196 & -15.6203 & -3.8718 & 27.5784 & -20.1008\\
-0.4773 & 30.7177 & -4.1614 & -2.2452 & -15.1054 & 36.5615\\
-2.4147 & -15.9583 & 0.1718 & -9.1885 & -7.3050 & -23.9865\\
-25.9029 & 36.0671 & -5.5736 & -6.0057 & -22.5206 & -12.9891\\
-42.1783 & 11.5273 & 5.9952 & 2.0493 & -27.2530 & 3.8533\\
32.4428 & -40.7519 & 4.1238 & -13.7866 & 7.3300 & -2.0041
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Section*
Task 2
\end_layout

\begin_layout Standard
In this task we write a function that evaluates and then plot the first
 5 Chebychev polynomials of the first kind.
 They are the solution to the second order ordinary differential equations:
\begin_inset Formula 
\[
(1-x^{2})y''-xy'+n^{2}y=0
\]

\end_inset


\begin_inset Formula 
\[
(1-x^{2})y''-3xy'+n(n+2)y=0
\]

\end_inset


\end_layout

\begin_layout Standard
They are orthogonal and have properties that lend themselves to being used
 for interpolation.
 
\end_layout

\begin_layout Standard
For evaluating the polynomials in this task, I chose the recursion on the
 work sheet for ease of implementation, though a more numerically stable
 and more efficient algorithm, the Clenshaw algorithm would be a better
 alternative.
\end_layout

\begin_layout Standard
A plot of the first 5 Chebychev polynomials can be found in figure 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:cheby"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename task2.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cheby"

\end_inset

The first 5 Chebychev polynomials of the first kind
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Task 3
\end_layout

\begin_layout Standard
When incrementing an unsigned 8-bit integer 300 times, I noticed the value
 of the variable starting over after 255 at 0.
 This is known as an integer overflow and is a result of the finite representati
on of numbers in a machine.
 Formally after incrementing 255, which in binary is represented as 11111111
 the result is 100000000, which has no bits not equal to zero that fit into
 the 8-bit variable, which will result in the variable starting over at
 0.
 The first bit (1), being a carry over into the least significant bit of
 a more significant word, is called the carry bit and can, if handled in
 a programming language with adequate access, be queried from the CPU as
 the 
\begin_inset Quotes eld
\end_inset

carry flag
\begin_inset Quotes erd
\end_inset

.
 Naturally this can occur even for bigger (any) word sizes, such as the
 64-Bit integer on now commonly used 64-Bit x86 machines.
 If dealing with a signed variable, the overflow will also result in a sign
 change.
 
\end_layout

\begin_layout Standard
It should be noted that in Python this phenomenon can usually not be observed
 since regular Python variables have arbitrary integer precision and grow
 as needed internally.
 For this exercise the workaround was to use a numpy array, which wrap C-style
 arrays with C datatypes, containing only one element.
\end_layout

\begin_layout Section*
Appendix
\end_layout

\begin_layout Subsection*
Task 1 program listing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Sorry for not commenting these properly
\end_layout

\begin_layout Plain Layout

def np_mat2tex(m):
\end_layout

\begin_layout Plain Layout

    return " 
\backslash

\backslash

\backslash

\backslash
 
\backslash
n".join(" & ".join("{:.4f}".format(elem)
\end_layout

\begin_layout Plain Layout

        for elem in row) for row in m.tolist())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def np_vec2tex(m, delim=" 
\backslash

\backslash

\backslash

\backslash
 "):
\end_layout

\begin_layout Plain Layout

    return delim.join("{:.4f}".format(elem)
\end_layout

\begin_layout Plain Layout

        for elem in m.tolist())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 1.
\end_layout

\begin_layout Plain Layout

# 309231
\end_layout

\begin_layout Plain Layout

np.random.seed(9231)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Rescale random values from [0,1]
\end_layout

\begin_layout Plain Layout

A = np.random.rand(6,6) * 10.0 - 5.0
\end_layout

\begin_layout Plain Layout

print("A = ", np_mat2tex(A), "
\backslash
n")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 2.
\end_layout

\begin_layout Plain Layout

max_value = A.max()
\end_layout

\begin_layout Plain Layout

max_index = np.where(A == max_value)
\end_layout

\begin_layout Plain Layout

print(max_index, max_value, "
\backslash
n")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 3.
\end_layout

\begin_layout Plain Layout

row_max = A.max(axis=0)
\end_layout

\begin_layout Plain Layout

col_max = A.max(axis=1)
\end_layout

\begin_layout Plain Layout

print("r = ", np_vec2tex(row_max, " & "))
\end_layout

\begin_layout Plain Layout

print("c = ", np_vec2tex(col_max), "
\backslash
n")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# I hope row_max * col_max is fine (instead of the other way round)
\end_layout

\begin_layout Plain Layout

print(np.dot(row_max, col_max))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 4.
\end_layout

\begin_layout Plain Layout

B = np.random.rand(6,6) * 10.0 - 5.0
\end_layout

\begin_layout Plain Layout

C = np.dot(A, B)
\end_layout

\begin_layout Plain Layout

D = np.dot(B, A)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print("B = ", np_mat2tex(B))
\end_layout

\begin_layout Plain Layout

print("C = ", np_mat2tex(C))
\end_layout

\begin_layout Plain Layout

print("D = ", np_mat2tex(D))
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Task 2 program listing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def cheby(x, N):
\end_layout

\begin_layout Plain Layout

	ret = np.zeros((N+1, len(x)))
\end_layout

\begin_layout Plain Layout

	ret[0] = np.ones(len(x))
\end_layout

\begin_layout Plain Layout

	ret[1] = np.copy(x)
\end_layout

\begin_layout Plain Layout

	for n in range(2,N+1):
\end_layout

\begin_layout Plain Layout

		ret[n] = 2*x*ret[n-1] - ret[n-2]
\end_layout

\begin_layout Plain Layout

	return ret
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x = np.linspace(-1, 1, 100)
\end_layout

\begin_layout Plain Layout

T = cheby(x, 4)
\end_layout

\begin_layout Plain Layout

for i in range(len(T)):
\end_layout

\begin_layout Plain Layout

	plt.plot(x, T[i], label="T_" + str(i))
\end_layout

\begin_layout Plain Layout

plt.legend()
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.xlabel("x")
\end_layout

\begin_layout Plain Layout

plt.ylabel("T_n(x)")
\end_layout

\begin_layout Plain Layout

plt.ylim(-1.0, 1.05)
\end_layout

\begin_layout Plain Layout

plt.savefig("task2.pdf")
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Task 3 program listing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

i = np.arange(1, dtype=np.uint8)
\end_layout

\begin_layout Plain Layout

print(i[0])
\end_layout

\begin_layout Plain Layout

for j in range(0, 300):
\end_layout

\begin_layout Plain Layout

	i[0] = i[0] + 1
\end_layout

\begin_layout Plain Layout

	print(i[0])
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Expectation value of the maximum of 
\begin_inset Formula $N$
\end_inset

 samples of a uniform distribution in 
\begin_inset Formula $[0,1]$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:exp_max"

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $X_{i}\in[0,1]$
\end_inset

 be 
\begin_inset Formula $N\in\mathbb{N}$
\end_inset

 independent uniformly distributed random variables.
 Let 
\begin_inset Formula $M=max(X_{1,},X_{2},...,X_{N})$
\end_inset

 be the maximum in question.
 The probability of 
\begin_inset Formula $M$
\end_inset

 being smaller than some 
\begin_inset Formula $x\in\mathbb{R}$
\end_inset

 is: 
\begin_inset Formula 
\[
P(M\le x)=P(X_{1}\le x,X_{2}\le x,...,X_{N}\le x)=P(X_{1}\le x)\cdot P(X_{2}\le x)\cdot...\cdot P(X_{N}\le x)=x^{N}
\]

\end_inset


\end_layout

\begin_layout Standard
Since all random variables are independent the factorization in the second
 step is allowed.
\end_layout

\begin_layout Standard
\begin_inset Formula $P(M\le x)$
\end_inset

 being the definition for the cumulative distribution function, we can obtain
 the probability distribution for 
\begin_inset Formula $M$
\end_inset

 by differentiation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\rho_{M}(x)=N\cdot x^{N-1}
\]

\end_inset


\end_layout

\begin_layout Standard
And it follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
E[M]=\int_{0}^{1}x\cdot N\cdot x^{N-1}dx=\frac{N}{N+1}
\]

\end_inset


\end_layout

\end_body
\end_document
