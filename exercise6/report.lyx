#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Computational Physics - Exercise 6
\end_layout

\begin_layout Author
Joel Schumacher, 309231, joel.schumacher@rwth-aachen.de
\end_layout

\begin_layout Part*
Time-dependent Schrödinger Equation
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
In this exercise the goal is to solve the time-dependent Schrödinger equation
 in one dimension:
\begin_inset Formula 
\[
i\hbar\frac{\partial}{\partial t}\Psi(x,t)=\left(-\frac{\hbar^{2}}{2M}\frac{\partial}{\partial x^{2}}+V(x)\right)\Psi(x,t)
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\hbar=M=1$
\end_inset

 and 
\begin_inset Formula 
\[
V(x)=\begin{cases}
2 & 50\leq x\leq50.5\\
0 & otherwise
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
and with boundary conditions:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Psi(x,t=0)=\frac{1}{(2\pi\sigma^{2})^{1/4}}\exp\left(iq(x-x_{0})\right)\exp\left(-\frac{(x-x_{\text{0}})^{2}}{4\sigma^{2}}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\sigma=3$
\end_inset

, 
\begin_inset Formula $x_{0}=20$
\end_inset

, 
\begin_inset Formula $q=1$
\end_inset

, which represents a gaussian wave packet at time 
\begin_inset Formula $t=0$
\end_inset

.
\end_layout

\begin_layout Section*
Simulation model
\end_layout

\begin_layout Standard
Using finite differences the spatial derivative in the Schrödinger equation
 becomes:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}}{\partial x^{2}}\Psi(x,t)=\frac{\Psi(x+\Delta,t)-2\Psi(x,t)+\Psi(x-\Delta,t)}{\Delta^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\Delta=0.1$
\end_inset

 being the spacing of our simulation grid.
\end_layout

\begin_layout Standard
The Schrödinger equation in one dimension then becomes
\begin_inset Formula 
\begin{align*}
i\frac{\partial}{\partial t}\Psi(x,t) & =-\frac{\Psi(x+\Delta,t)-2\Psi(x,t)+\Psi(x-\Delta,t)}{2\Delta^{2}}+V(x)\Psi(x,t)\\
 & =\frac{1}{\Delta^{2}}\left(-\frac{1}{2}\Psi(x+\Delta,t)-\frac{1}{2}\Psi(x-\Delta,t)+\left(1+\Delta^{2}V(x)\right)\Psi(x,t)\right).\\
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Our discretized Hamiltonian can then be read as:
\begin_inset Formula 
\[
i\frac{\partial}{\partial t}\begin{pmatrix}\Psi_{1}(t)\\
\Psi_{2}(t)\\
\Psi_{3}(t)\\
\vdots\\
\vdots\\
\Psi_{L}(t)
\end{pmatrix}=\underbrace{\frac{1}{\Delta^{2}}\begin{pmatrix}1+\Delta^{2}V_{1} & -1/2 & 0 &  &  & 0\\
-1/2 & 1+\Delta^{2}V_{2} & -1/2 & 0 &  & 0\\
0 & -1/2 & 1+\Delta^{2}V_{3}\\
 &  &  & \ddots &  & 0\\
 &  &  &  &  & -1/2\\
0 &  &  & 0 & -1/2 & 1+\Delta^{2}V_{L}
\end{pmatrix}}_{H}\begin{pmatrix}\Psi_{1}(t)\\
\Psi_{2}(t)\\
\Psi_{3}(t)\\
\vdots\\
\vdots\\
\Psi_{L}(t)
\end{pmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $V_{i}=V(i\Delta)$
\end_inset

, 
\begin_inset Formula $\Psi_{i}(t)=\Psi(x=i\Delta,t)$
\end_inset

 and 
\begin_inset Formula $L=1001$
\end_inset

 being the size of our simulation grid (in number of grid points).
\end_layout

\begin_layout Standard
The Hamiltonian can then be decomposed into a sum:
\begin_inset Formula 
\begin{align*}
H & =V+K_{1}+K_{2}=\frac{1}{\Delta^{2}}\begin{pmatrix}1+\Delta^{2}V_{1} & 0 & 0 &  &  & 0\\
0 & 1+\Delta^{2}V_{2} & 0 & 0 &  & 0\\
0 & 0 & 1+\Delta^{2}V_{3}\\
 &  &  & \ddots &  & 0\\
 &  &  &  & 1+\Delta^{2}V_{L-1} & \text{0}\\
0 &  &  & 0 & 0 & 1+\Delta^{2}V_{L}
\end{pmatrix}\\
 & +\frac{1}{\Delta^{2}}\begin{pmatrix}0 & -1/2 & 0 &  &  & 0\\
-1/2 & 0 & 0\\
0 & 0 & 0\\
 &  &  & \ddots & -1/2 & 0\\
 &  &  & -1/2 & 0 & 0\\
0 &  &  & 0 & 0 & 0
\end{pmatrix}+\frac{1}{\Delta^{2}}\begin{pmatrix}0 & 0 & 0 &  &  & 0\\
0 & 0 & -1/2\\
0 & -1/2 & 0\\
 &  &  & \ddots &  & 0\\
 &  &  &  & 0 & -1/2\\
0 &  &  & 0 & -1/2 & 0
\end{pmatrix}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
The time evolution operator can then be written as:
\begin_inset Formula 
\[
U(\tau)=e^{-i\tau H}\approx e^{-i\tau K_{1}/2}e^{-i\tau K_{2}/2}e^{-i\tau V}e^{-i\tau K_{2}/2}e^{-i\tau K_{1}/2}
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\tau=0.001$
\end_inset

 is the time step of our simulation.
\end_layout

\begin_layout Standard
The full expressions are the following:
\begin_inset Formula 
\begin{align*}
e^{-i\tau K_{1}/2} & =\begin{pmatrix}c & is &  &  &  &  &  & \dots & 0\\
is & c & 0 &  &  &  &  &  & \vdots\\
 & 0 & c & is\\
 &  & is & c & 0\\
 &  &  & 0 & c & is\\
 &  &  &  & is & c & 0\\
 &  &  &  &  & 0 & \ddots & is\\
\vdots &  &  &  &  &  & is & \ddots & 0\\
\text{0} & \dots &  &  &  &  &  & \text{0} & 1
\end{pmatrix}\\
e^{-i\tau K_{2}/2} & =\begin{pmatrix}1 & 0 &  &  &  &  &  & \dots & 0\\
0 & c & is &  &  &  &  &  & \vdots\\
 & is & c & 0\\
 &  & 0 & c & is\\
 &  &  & is & c & 0\\
 &  &  &  & 0 & c & is\\
 &  &  &  &  & is & \ddots & 0\\
\vdots &  &  &  &  &  & 0 & \ddots & is\\
\text{0} & \dots &  &  &  &  &  & is & c
\end{pmatrix}\\
e^{-i\tau V} & =\frac{1}{\Delta^{2}}\begin{pmatrix}1+\Delta^{2}V_{1} & 0 & 0 &  &  & 0\\
0 & 1+\Delta^{2}V_{2} & 0 & 0 &  & 0\\
0 & 0 & 1+\Delta^{2}V_{3}\\
 &  &  & \ddots &  & 0\\
 &  &  &  & 1+\Delta^{2}V_{L-1} & \text{0}\\
0 &  &  & 0 & 0 & 1+\Delta^{2}V_{L}
\end{pmatrix}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $c=\cos\left(\tau/(4\Delta^{2})\right)$
\end_inset

 and 
\begin_inset Formula $s=\sin\left(\tau/(4\Delta^{2})\right)$
\end_inset

.
\end_layout

\begin_layout Standard
In each timestep a set of complex values for each grid point is then updated
 using the time evolution operator.
\end_layout

\begin_layout Section*
Simulation results
\end_layout

\begin_layout Standard
The time evolution of the probability distribution of the wave function
 
\begin_inset Formula $P(x,t)=|\Psi(x,t)|^{2}$
\end_inset

 is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:time_evol"

\end_inset

.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:comparison"

\end_inset

 a comparison of the cases with a potential barrier and without a potential
 barrier can be seen.
 In the case of the potential barrier the probability of the transmitted
 portion has been rescaled, so that the distribution with the maximum transmissi
on has a total probability of 
\begin_inset Formula $1$
\end_inset

 behind the barrier for easier comparison of the two cases.
 It is visibile that this rescaling factor is 
\begin_inset Formula $\sim3$
\end_inset

, implying that the total transmission probability is about 
\begin_inset Formula $30\%$
\end_inset

.
 It can also be observed that the wave packets move faster after the transmissio
n if a barrier is present compared to the case of no barrier.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tdse_V=2_rescale_right=False.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The probability distribution of the wave packet at different times.
 The barrier is represented by the grey box.
\begin_inset CommandInset label
LatexCommand label
name "fig:time_evol"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tdse_V=0_rescale_right=False.pdf
	scale 40

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tdse_V=2_rescale_right=True.pdf
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The probability distribution of the wave packet at different times.
 Without a potential barrier on the left and with a potential barrier on
 the right.
 The right plot has been rescaled, so that probability distribution with
 the most transmission has total probability 1 on the right side of the
 barrier.
\begin_inset CommandInset label
LatexCommand label
name "fig:comparison"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Discussion
\end_layout

\begin_layout Standard
The simulation seems to give a fairly correct result, that matches with
 the expected solution of the Schrödinger equation in that the wave is partially
 transmitted by a small fraction and the wave packet gaining speed after
 the transmission.
 This phenomenon can be explained by either a simple, intuitive picture
 of a Ball tunneling through the tip of a potential hill and rolling down
 the rest or, more accurately, the transmission probability depending on
 the energy of the quantum, with higher energies being more probable.
 This potential barrier therefore effectively acts as a high-pass filter,
 favoring the components of the wave packet with higher momentum.
 The fact that the wave packet is comprised of different momenta is also
 visible in the dispersion of the packet, which is also very much in line
 with the expectation.
\end_layout

\begin_layout Standard
In conclusion the product formula approach is an effective and simple approach
 for solving the one-dimensional Schrödinger equation.
 This approach can not be trivially extended to higher dimension, since
 mapping a e.g.
 2 dimensional grid of points to a 1-dimensional vector will result in a
 differently structured matrix, which complicates the structure of the exponenti
al of 
\begin_inset Formula $K_{1}$
\end_inset

 and 
\begin_inset Formula $K_{2}$
\end_inset

.
 Also lowering the time step size introduces significant oscillations, which
 can still be observed in the plots for 
\begin_inset Formula $t=50$
\end_inset

 in the vicinity of 
\begin_inset Formula $x=100$
\end_inset

, meaning the time step has to be sufficiently low for accurate results.
\end_layout

\begin_layout Part*
\begin_inset Note Note
status open

\begin_layout Plain Layout
* Introduction: describe briefly the problem you are modeling and simulating
\end_layout

\begin_layout Plain Layout
* Simulation model and method: describe briefly the model and simulation
 method in text format
\end_layout

\begin_layout Plain Layout
* Simulation results: show figures (with figure captions!) depicting the
 simulation results.
 Give a brief description of the results in text format
\end_layout

\begin_layout Plain Layout
* Discussion: Summarize your findings
\end_layout

\begin_layout Plain Layout
* Appendix: Include the listing of the program
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Appendix
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

import cmath
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sigma = 3
\end_layout

\begin_layout Plain Layout

x0 = 20
\end_layout

\begin_layout Plain Layout

q = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Delta = 0.1
\end_layout

\begin_layout Plain Layout

L = 1001
\end_layout

\begin_layout Plain Layout

tau = 0.001
\end_layout

\begin_layout Plain Layout

m = 50000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rescale = True
\end_layout

\begin_layout Plain Layout

#rescale = False
\end_layout

\begin_layout Plain Layout

V_barrier = 2
\end_layout

\begin_layout Plain Layout

#V_barrier = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def V(x):
\end_layout

\begin_layout Plain Layout

    if x >= 50.0 and x <= 50.5:
\end_layout

\begin_layout Plain Layout

        return V_barrier
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def psi_t0(x):
\end_layout

\begin_layout Plain Layout

    ret = math.pow(2 * math.pi * sigma*sigma, -0.25)
\end_layout

\begin_layout Plain Layout

    ret *= cmath.exp(1j * q * (x-x0))
\end_layout

\begin_layout Plain Layout

    ret *= math.exp(-(x-x0)*(x-x0)/(4*sigma*sigma))
\end_layout

\begin_layout Plain Layout

    return ret
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def pd(psi):
\end_layout

\begin_layout Plain Layout

    v = np.absolute(psi)
\end_layout

\begin_layout Plain Layout

    return v*v
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

psi = np.zeros(L, dtype=complex)
\end_layout

\begin_layout Plain Layout

for l in range(L):
\end_layout

\begin_layout Plain Layout

    psi[l] = psi_t0(l*Delta)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

expV = np.zeros((L,L), dtype=complex)
\end_layout

\begin_layout Plain Layout

for l in range(L):
\end_layout

\begin_layout Plain Layout

    expV[l][l] = cmath.exp(-1j * tau * V(l*Delta))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

c = math.cos(tau / (4*Delta*Delta))
\end_layout

\begin_layout Plain Layout

s = math.sin(tau / (4*Delta*Delta))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

expK1 = np.eye(L, dtype=complex) * c
\end_layout

\begin_layout Plain Layout

expK1[L-1][L-1] = 1
\end_layout

\begin_layout Plain Layout

expK2 = np.eye(L, dtype=complex) * c
\end_layout

\begin_layout Plain Layout

expK2[1][1] = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for l in range(L):
\end_layout

\begin_layout Plain Layout

    if l+1 < L:
\end_layout

\begin_layout Plain Layout

        if l % 2 == 0:
\end_layout

\begin_layout Plain Layout

            expK1[l+1][l] = expK1[l][l+1] = 1j * s
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            expK2[l+1][l] = expK2[l][l+1] = 1j * s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

U = expK1 @ expK2 @ expV @ expK2 @ expK1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x = np.arange(L) * Delta
\end_layout

\begin_layout Plain Layout

plt.xlabel("x")
\end_layout

\begin_layout Plain Layout

plt.ylabel("P(x,t)")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ax = plt.gca()
\end_layout

\begin_layout Plain Layout

ylim = 0.14
\end_layout

\begin_layout Plain Layout

plt.ylim(0, ylim)
\end_layout

\begin_layout Plain Layout

if V_barrier > 0:
\end_layout

\begin_layout Plain Layout

    ax.fill_between([50.0, 50.5], 0, ylim, facecolor='grey', alpha=0.5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

right_index = math.floor(50.5 / Delta + 0.5)
\end_layout

\begin_layout Plain Layout

right_normalization = 0
\end_layout

\begin_layout Plain Layout

snapshots = []
\end_layout

\begin_layout Plain Layout

for i in range(m+1):
\end_layout

\begin_layout Plain Layout

    if math.floor(i/m*100) != math.floor((i-1)/m*100):
\end_layout

\begin_layout Plain Layout

        print(math.floor(i/m*100), "%")
\end_layout

\begin_layout Plain Layout

    t = i * tau
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # snapshot
\end_layout

\begin_layout Plain Layout

    if i in [0, m/10, m/5*4, m/50*45, m]:
\end_layout

\begin_layout Plain Layout

        total_prob = np.sum(pd(psi)) * Delta
\end_layout

\begin_layout Plain Layout

        right_prob = np.sum(pd(psi[right_index:])) * Delta
\end_layout

\begin_layout Plain Layout

        if right_prob > right_normalization:
\end_layout

\begin_layout Plain Layout

            right_normalization = right_prob
\end_layout

\begin_layout Plain Layout

        snapshots.append((t, pd(psi)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    psi = np.dot(U, psi)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for t, pdpsi in snapshots:
\end_layout

\begin_layout Plain Layout

    if rescale:
\end_layout

\begin_layout Plain Layout

        pdpsi[right_index:] /= right_normalization
\end_layout

\begin_layout Plain Layout

    plt.plot(x, pdpsi, label="t={}".format(t))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.legend()
\end_layout

\begin_layout Plain Layout

plt.savefig("tdse_V={}_rescale_right={}.pdf".format(V_barrier, rescale))
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
